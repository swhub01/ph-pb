<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false">

    <!--
    说明：
    1. 文件的命名和加载顺序有关
       logback.xml早于application.yml加载，logback-spring.xml晚于application.yml加载
       如果logback配置需要使用application.yml中的属性，需要命名为logback-spring.xml
    2. logback使用application.yml中的属性
       使用springProperty才可使用application.yml中的值 可以设置默认值
    -->
    <!--腾讯云环境需要腾讯云环境需要升级适配包hsaf-tencent-rpc到1.1.3以上，并且打开此注解并且在日志输出格式中添加%trace才能正确显示链路ID-->
    <!-- <conversionRule conversionWord="trace" converterClass="com.tencent.tsf.logger.LogbackTraceConverter" /> -->
    <!--如果要修改日志路径，要注意是否有文件目录的读写权限-->
    <springProperty scope="context" name="LOG_HOME" source="logging.file.path" defaultValue="./logs/ph-pb"/>
    <springProperty scope="context" name="APP_NAME" source="spring.application.name" defaultValue="ph-pb"/>
    <!-- 日志输出级别 -->
    <springProperty scope="context" name="ROOT_LEVEL" source="logging.level.root" defaultValue="INFO"/>
    <springProperty scope="context" name="PATTERN" source="logging.file.pattern" defaultValue="%d{HH:mm:ss.SSS} %X{TRACE_ID} [%thread] %-5level %logger{20} - [%method,%line] - %msg%n"/>
    <!--日志保留天数-->
    <springProperty scope="context" name="MAXHISTORY" source="logging.file.maxHistory" defaultValue="30"/>
    <!--单个日志文件最大容量-->
    <springProperty scope="context" name="MAXFILESIZE" source="logging.file.maxFileSize" defaultValue="100MB"/>
    <!--日志文件总量-->
    <springProperty scope="context" name="TOTALSIZECAP" source="logging.file.totalSizeCap" defaultValue="10GB"/>


    <!-- 控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%message：日志消息，%n是换行符-->
            <pattern>${PATTERN}</pattern>
        </encoder>
    </appender>
    <!-- 按照每天生成日志文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <fileNamePattern>${LOG_HOME}/${APP_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--日志文件保留天数-->
            <maxHistory>${MAXHISTORY}</maxHistory>
            <maxFileSize>${MAXFILESIZE}</maxFileSize>
            <totalSizeCap>${TOTALSIZECAP}</totalSizeCap>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%message：日志消息，%n是换行符 -->
            <pattern>${PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 按照每天生成日志文件 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
            <!--    <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>-->
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <fileNamePattern>${LOG_HOME}/error/${APP_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--日志文件保留天数-->
            <maxHistory>${MAXHISTORY}</maxHistory>
            <maxFileSize>${MAXFILESIZE}</maxFileSize>
            <totalSizeCap>${TOTALSIZECAP}</totalSizeCap>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%message：日志消息，%n是换行符 -->
            <pattern>${PATTERN}</pattern>
        </encoder>
    </appender>

    <!--打印完整SQL日志，需要配置为debug日志级别-->
    <logger name="com.apache.ibatis" />
    <logger name="java.sql.Connection" />
    <logger name="java.sql.Statement" />
    <logger name="java.sql.PreparedStatement"/>

    <!-- 日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
        <appender-ref ref="ERROR_FILE"/>
    </root>

</configuration>
